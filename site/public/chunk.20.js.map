{"version":3,"sources":["webpack:///chunk.20.js","webpack:///./pages/mixins/index.js"],"names":["webpackJsonp","129","module","exports","__webpack_require__","Object","defineProperty","value","_templateObject","strings","raw","freeze","defineProperties","_utils","default","component","this","$"],"mappings":"AAAAA,cAAc,KAERC,IACA,SAAUC,EAAQC,EAASC,GAEjC,YAGAC,QAAOC,eAAeH,EAAS,cAC7BI,OAAO,GAGT,IAAIC,GAUJ,SAAgCC,EAASC,GAAO,MAAOL,QAAOM,OAAON,OAAOO,iBAAiBH,GAAWC,KAAOH,MAAOF,OAAOM,OAAOD,SAVtF,yDAA0D,sCAAuC,yDAA0D,qCCVzMN,GAAA,IACAA,EAAA,IACAA,EAAA,GAEA,IAAAS,GAAAT,EAAA,GDkBAD,GAAQW,SChBO,EAAAD,EAAAE,WAAU,WACvB,MAAOC,MAAKC,EAAZT,EAAA","file":"chunk.20.js","sourcesContent":["webpackJsonp([20],{\n\n/***/ 129:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _templateObject = _taggedTemplateLiteral(['\\n    <x-layout title=\"Mixins\">\\n      <x-marked src=\"', '\"</x-marked>\\n    </x-layout>\\n  '], ['\\n    <x-layout title=\"Mixins\">\\n      <x-marked src=\"', '\"</x-marked>\\n    </x-layout>\\n  ']);\n\n__webpack_require__(25);\n\n__webpack_require__(33);\n\n__webpack_require__(26);\n\nvar _utils = __webpack_require__(24);\n\nfunction _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nexports.default = (0, _utils.component)(function mixinsIndex() {\n  return this.$(_templateObject, '\\n        As stated previously, the mixin pattern is a way to take several class\\n        definitions and compose them into one. It works well for custom elements\\n        because every element has a different purpose and it allows you to pick\\n        and choose what goes into it. It\\'s also what lets you render one\\n        component with <x-link href=\"/renderers/with-preact\">Preact</x-link>\\n        and maybe another with [LitHTML](/renderers/with-lit-html). Each\\n        component is self-contained.\\n\\n        Skate\\'s mixins follow a common component lifecycle specification, which\\n        enables it to interop with not only itself, but also other libraries.\\n        The specification is described as follows and is what you get if you\\n        combine all of the mixins together, or use the [`withComponent`](/mixins/with-component)\\n        mixin.\\n\\n        ```js\\n        interface Component {\\n          // withChildren\\n          childrenUpdated(): void;\\n\\n          // withContext\\n          context: Object;\\n\\n          // withLifecycle\\n          connecting(): void;\\n          connected(): void;\\n          disconnecting(): void;\\n          disconnected(): void;\\n\\n          // withRenderer\\n          rendering(): void;\\n          render(props: Object, state: Object): any;\\n          rendered(): void;\\n          renderer(root: Node, render: Render): void;\\n\\n          // withUpdate\\n          static props: PropTypes;\\n          props: Object;\\n          state: Object;\\n          updating(prevProps: Object, prevState: Object): void;\\n          shouldUpdate(prevProps: Object, prevState: Object): boolean;\\n          updated(prevProps: Object, prevState: Object): void;\\n          triggerUpdate(): void;\\n\\n          // withUnique\\n          static defined: Function;\\n          static is: string;\\n        }\\n        ```\\n      ');\n});\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// chunk.20.js","// @flow\n\nimport '../../components/code';\nimport '../../components/layout';\nimport '../../components/primitives';\n\nimport { component, style } from '../../utils';\n\nexport default component(function mixinsIndex() {\n  return this.$`\n    <x-layout title=\"Mixins\">\n      <x-marked src=\"${`\n        As stated previously, the mixin pattern is a way to take several class\n        definitions and compose them into one. It works well for custom elements\n        because every element has a different purpose and it allows you to pick\n        and choose what goes into it. It's also what lets you render one\n        component with <x-link href=\"/renderers/with-preact\">Preact</x-link>\n        and maybe another with [LitHTML](/renderers/with-lit-html). Each\n        component is self-contained.\n\n        Skate's mixins follow a common component lifecycle specification, which\n        enables it to interop with not only itself, but also other libraries.\n        The specification is described as follows and is what you get if you\n        combine all of the mixins together, or use the [\\`withComponent\\`](/mixins/with-component)\n        mixin.\n\n        \\`\\`\\`js\n        interface Component {\n          // withChildren\n          childrenUpdated(): void;\n\n          // withContext\n          context: Object;\n\n          // withLifecycle\n          connecting(): void;\n          connected(): void;\n          disconnecting(): void;\n          disconnected(): void;\n\n          // withRenderer\n          rendering(): void;\n          render(props: Object, state: Object): any;\n          rendered(): void;\n          renderer(root: Node, render: Render): void;\n\n          // withUpdate\n          static props: PropTypes;\n          props: Object;\n          state: Object;\n          updating(prevProps: Object, prevState: Object): void;\n          shouldUpdate(prevProps: Object, prevState: Object): boolean;\n          updated(prevProps: Object, prevState: Object): void;\n          triggerUpdate(): void;\n\n          // withUnique\n          static defined: Function;\n          static is: string;\n        }\n        \\`\\`\\`\n      `}\"</x-marked>\n    </x-layout>\n  `;\n});\n\n\n\n// WEBPACK FOOTER //\n// ./pages/mixins/index.js"],"sourceRoot":""}