{
  "id": "pages\\renderers\\index.ts",
  "dependencies": [
    {
      "name": "C:\\Users\\tjshu\\Documents\\GitHub\\skatejs\\tsconfig.json",
      "includedInParent": true,
      "mtime": 1533852749669
    },
    {
      "name":
        "C:\\Users\\tjshu\\Documents\\GitHub\\skatejs\\site\\package.json",
      "includedInParent": true,
      "mtime": 1534115027496
    },
    {
      "name": "C:\\Users\\tjshu\\Documents\\GitHub\\skatejs\\.babelrc",
      "includedInParent": true,
      "mtime": 1533796116874
    },
    {
      "name": "skatejs",
      "loc": { "line": 4, "column": 26 },
      "parent":
        "C:\\Users\\tjshu\\Documents\\GitHub\\skatejs\\site\\pages\\renderers\\index.ts",
      "resolved":
        "C:\\Users\\tjshu\\Documents\\GitHub\\skatejs\\site\\node_modules\\skatejs\\dist\\esm\\index.js"
    },
    {
      "name": "../../components/layout",
      "loc": { "line": 5, "column": 8 },
      "parent":
        "C:\\Users\\tjshu\\Documents\\GitHub\\skatejs\\site\\pages\\renderers\\index.ts",
      "resolved":
        "C:\\Users\\tjshu\\Documents\\GitHub\\skatejs\\site\\components\\layout.ts"
    },
    {
      "name": "../../components/marked",
      "loc": { "line": 6, "column": 8 },
      "parent":
        "C:\\Users\\tjshu\\Documents\\GitHub\\skatejs\\site\\pages\\renderers\\index.ts",
      "resolved":
        "C:\\Users\\tjshu\\Documents\\GitHub\\skatejs\\site\\components\\marked.ts"
    },
    {
      "name": "../../utils",
      "loc": { "line": 7, "column": 24 },
      "parent":
        "C:\\Users\\tjshu\\Documents\\GitHub\\skatejs\\site\\pages\\renderers\\index.ts",
      "resolved":
        "C:\\Users\\tjshu\\Documents\\GitHub\\skatejs\\site\\utils\\index.ts"
    }
  ],
  "generated": {
    "js":
      "\"use strict\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _templateObject = _taggedTemplateLiteral([\"\\n      <x-layout title=\\\"Renderers\\\">\\n        <x-marked src=\\\"\", \"\\\"></x-marked>\\n      </x-layout>\\n    \"], [\"\\n      <x-layout title=\\\"Renderers\\\">\\n        <x-marked src=\\\"\", \"\\\"></x-marked>\\n      </x-layout>\\n    \"]);\n\nfunction _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _a;\nvar skatejs_1 = require(\"skatejs\");\nrequire(\"../../components/layout\");\nrequire(\"../../components/marked\");\nvar utils_1 = require(\"../../utils\");\nexports.default = skatejs_1.define((_a = function (_utils_1$Component) {\n  _inherits(_a, _utils_1$Component);\n\n  function _a() {\n    _classCallCheck(this, _a);\n\n    return _possibleConstructorReturn(this, (_a.__proto__ || Object.getPrototypeOf(_a)).apply(this, arguments));\n  }\n\n  _createClass(_a, [{\n    key: \"render\",\n    value: function render() {\n      return this.$(_templateObject, \"\\n          Renderers are a way to take any UI library and essentially wrap a web\\n          component around it. We've provided renderers for some of the popular UI\\n          libraries:\\n\\n          - [LitHTML](/renderers/with-lit-html)\\n          - [Preact](/renderers/with-preact)\\n          - [React](/renderers/with-react)\\n\\n          Skate also ships with a super-simple\\n          [default renderer](/renderers/default) that\\n          simply sets `innerHTML`. It's a fantastic way to mock up and\\n          write simple components without requiring a UI library.\\n\\n          ### Writing a renderer\\n\\n          The best way to write a renderer is to base it on the\\n          [`withRenderer`](/mixins/with-renderer)\\n          mixin API. To do this, you implement the `renderer` method on\\n          your class.\\n\\n          ```js\\n          interface Renderer {\\n            renderer(root: Node, render: Function): void;\\n          }\\n          ```\\n\\n          #### A simple implementation\\n\\n          An example of a simple, concrete implementation of this might be to\\n          write a renderer that simply sets `innerHTML`. This is the\\n          default behaviour provided by the default `renderer()` function and is\\n          great for mockups, simple or static components. It's probably too naive\\n          for complex components that re-render a lot. However, it also serves as\\n          a fine example to show how to use the renderer API.\\n\\n          ```js\\n          // ./my-renderer.js\\n\\n          export default class extends HTMLElement {\\n            renderer(root, render) {\\n              root.innerHTML = render();\\n            }\\n          }\\n          ```\\n\\n          All this renderer does is simply set the `innerHTML` of the\\n          node that we're supposed to render to. We've called this node the\\n          `root`.\\n\\n          The `render` argument is a bound function of the\\n          `render` method you define on your class. To use this\\n          renderer, you'd do something like:\\n\\n          ```js\\n          // ./my-component.js\\n\\n          import MyRenderer from './my-renderer';\\n\\n          export default class extends MyRenderer {\\n            render() {\\n              return 'Hello, World!';\\n            }\\n          }\\n          ```\\n\\n          > The `render` function is bound with the host element as\\n          `this` and the first argument, so you can also destructure in\\n          the function arguments, if you want to.\\n\\n          #### Hooking it up\\n\\n          The one problem here is that your component doesn't yet know how to hook\\n          up `render` with `renderer` because you need to\\n          mixin `withRenderer`.\\n\\n          ```js\\n          // ./my-component.js\\n\\n          import { withRenderer } from 'skatejs';\\n          import MyRenderer from './my-renderer';\\n\\n          export default class extends withRenderer(MyRenderer) {\\n            render() {\\n              return 'Hello, World!';\\n            }\\n          }\\n          ```\\n\\n          #### Reuse\\n\\n          If you want to make this renderer a bit more generic, you might want it\\n          to be able to accept other types of base classes, as opposed to having\\n          it fixed to `HTMLElement`. To do this, just make it a mixin.\\n          This consists of making it into a function that returns a class.\\n\\n          ```js\\n          // ./my-renderer.js\\n\\n          export default (Base = HTMLElement) =>\\n            class extends Base {\\n              renderer(root, render) {\\n                root.innerHTML = render();\\n              }\\n            }\\n          ```\\n\\n          And there you have your renderer that you can reuse with any component.\\n\\n          Taking the `render` example a bit further, it will now look\\n          something like:\\n\\n          ```js\\n          // ./my-component.js\\n\\n          import { withRenderer } from 'skatejs';\\n          import myRenderer from './my-renderer';\\n\\n          export default class extends withRenderer(myRenderer()) {\\n            render() {\\n              return 'Hello, World!';\\n            }\\n          }\\n          ```\\n\\n          #### Responding to attributes and properties\\n\\n          This component doesn't yet respond to property sets, or have any dynamic\\n          states. If we wanted to, say, accept a name property or attribute, we\\n          can mixin the `withUpdate` and `withRenderer`\\n          mixins with your renderer.\\n\\n          ```js\\n          // ./my-component.js\\n\\n          import { props, withRenderer, withUpdate } from 'skatejs';\\n          import myRenderer from './my-renderer';\\n\\n          export default class extends withRenderer(withUpdate(myRenderer())) {\\n            static get props() {\\n              return {\\n                name: props.string\\n              };\\n            }\\n            render({ name }) {\\n              return `Hello, ${name}!`;\\n            }\\n          }\\n          ```\\n\\n          This component would now render when both a `name` property\\n          _and_ a `name` attribute are set.\\n\\n          #### Simplifying as a base class\\n\\n          If you don't want to repeat the mixin calls, simply make it a base\\n          class:\\n\\n          ```js\\n          // ./my-base.js\\n\\n          import { withRenderer, withUpdate } from 'skatejs';\\n          import myRenderer from './my-renderer';\\n\\n          export default myRenderer(withRenderer(withUpdate()));\\n          ```\\n\\n          > Your renderer can be composed into any point of your mixin chain, too!\\n\\n          Your component then can use it:\\n\\n          ```js\\n          // ./my-component.js\\n\\n          import { props } from 'skatejs';\\n          import MyBase from './my-base';\\n\\n          class MyComponent extends MyBase {\\n            static get props() {\\n              return {\\n                name: props.string\\n              };\\n            }\\n            render({ name }) {\\n              return `Hello, ${name}!`;\\n            }\\n          }\\n          ```\\n        \");\n    }\n  }]);\n\n  return _a;\n}(utils_1.Component), _a.is = 'x-pages-renderers-index', _a));",
    "map": {
      "mappings": [
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 1, "column": 0 },
          "generated": { "line": 17, "column": 0 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 1, "column": 0 },
          "generated": { "line": 17, "column": 4 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 1, "column": 0 },
          "generated": { "line": 17, "column": 16 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 1, "column": 0 },
          "generated": { "line": 17, "column": 24 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 1, "column": 0 },
          "generated": { "line": 17, "column": 33 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 1, "column": 0 },
          "generated": { "line": 17, "column": 34 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 2, "column": 0 },
          "generated": { "line": 18, "column": 0 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 2, "column": 0 },
          "generated": { "line": 18, "column": 8 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 2, "column": 0 },
          "generated": { "line": 18, "column": 33 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 3, "column": 0 },
          "generated": { "line": 19, "column": 0 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 3, "column": 0 },
          "generated": { "line": 19, "column": 8 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 3, "column": 0 },
          "generated": { "line": 19, "column": 33 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 4, "column": 0 },
          "generated": { "line": 20, "column": 0 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 4, "column": 0 },
          "generated": { "line": 20, "column": 4 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 4, "column": 0 },
          "generated": { "line": 20, "column": 14 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 4, "column": 0 },
          "generated": { "line": 20, "column": 22 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 4, "column": 0 },
          "generated": { "line": 20, "column": 35 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 4, "column": 0 },
          "generated": { "line": 20, "column": 36 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 6, "column": 0 },
          "generated": { "line": 21, "column": 0 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 6, "column": 0 },
          "generated": { "line": 21, "column": 8 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 6, "column": 0 },
          "generated": { "line": 21, "column": 15 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 6, "column": 15 },
          "generated": { "line": 21, "column": 18 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 6, "column": 15 },
          "generated": { "line": 21, "column": 28 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 6, "column": 15 },
          "generated": { "line": 21, "column": 34 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 6, "column": 21 },
          "generated": { "line": 21, "column": 36 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 6, "column": 21 },
          "generated": { "line": 22, "column": 0 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 6, "column": 21 },
          "generated": { "line": 24, "column": 0 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 6, "column": 21 },
          "generated": { "line": 25, "column": 0 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 6, "column": 21 },
          "generated": { "line": 27, "column": 0 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 6, "column": 21 },
          "generated": { "line": 28, "column": 0 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 6, "column": 21 },
          "generated": { "line": 30, "column": 0 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 6, "column": 21 },
          "generated": { "line": 31, "column": 0 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 6, "column": 21 },
          "generated": { "line": 32, "column": 0 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 9, "column": 10 },
          "generated": { "line": 32, "column": 29 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 10, "column": 6 },
          "generated": { "line": 33, "column": 0 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 10, "column": 13 },
          "generated": { "line": 33, "column": 13 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 10, "column": 18 },
          "generated": { "line": 33, "column": 18 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 10, "column": 6 },
          "generated": { "line": 33, "column": 19 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 203, "column": 5 },
          "generated": { "line": 34, "column": 0 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 6, "column": 21 },
          "generated": { "line": 35, "column": 0 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 6, "column": 21 },
          "generated": { "line": 37, "column": 0 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 6, "column": 21 },
          "generated": { "line": 38, "column": 0 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 7, "column": 16 },
          "generated": { "line": 38, "column": 2 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 7, "column": 16 },
          "generated": { "line": 38, "column": 10 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 6, "column": 21 },
          "generated": { "line": 38, "column": 19 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 8, "column": 11 },
          "generated": { "line": 38, "column": 22 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 8, "column": 11 },
          "generated": { "line": 38, "column": 25 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 8, "column": 11 },
          "generated": { "line": 38, "column": 27 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 8, "column": 16 },
          "generated": { "line": 38, "column": 30 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 6, "column": 21 },
          "generated": { "line": 38, "column": 55 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 6, "column": 15 },
          "generated": { "line": 38, "column": 59 }
        },
        {
          "source": "pages\\renderers\\index.ts",
          "name": null,
          "original": { "line": 6, "column": 0 },
          "generated": { "line": 38, "column": 61 }
        }
      ],
      "sources": {
        "pages\\renderers\\index.ts":
          "import { define } from 'skatejs';\nimport '../../components/layout';\nimport '../../components/marked';\nimport { Component } from '../../utils';\n\nexport default define(\n  class extends Component {\n    static is = 'x-pages-renderers-index';\n    render() {\n      return this.$`\n      <x-layout title=\"Renderers\">\n        <x-marked src=\"${`\n          Renderers are a way to take any UI library and essentially wrap a web\n          component around it. We've provided renderers for some of the popular UI\n          libraries:\n\n          - [LitHTML](/renderers/with-lit-html)\n          - [Preact](/renderers/with-preact)\n          - [React](/renderers/with-react)\n\n          Skate also ships with a super-simple\n          [default renderer](/renderers/default) that\n          simply sets \\`innerHTML\\`. It's a fantastic way to mock up and\n          write simple components without requiring a UI library.\n\n          ### Writing a renderer\n\n          The best way to write a renderer is to base it on the\n          [\\`withRenderer\\`](/mixins/with-renderer)\n          mixin API. To do this, you implement the \\`renderer\\` method on\n          your class.\n\n          \\`\\`\\`js\n          interface Renderer {\n            renderer(root: Node, render: Function): void;\n          }\n          \\`\\`\\`\n\n          #### A simple implementation\n\n          An example of a simple, concrete implementation of this might be to\n          write a renderer that simply sets \\`innerHTML\\`. This is the\n          default behaviour provided by the default \\`renderer()\\` function and is\n          great for mockups, simple or static components. It's probably too naive\n          for complex components that re-render a lot. However, it also serves as\n          a fine example to show how to use the renderer API.\n\n          \\`\\`\\`js\n          // ./my-renderer.js\n\n          export default class extends HTMLElement {\n            renderer(root, render) {\n              root.innerHTML = render();\n            }\n          }\n          \\`\\`\\`\n\n          All this renderer does is simply set the \\`innerHTML\\` of the\n          node that we're supposed to render to. We've called this node the\n          \\`root\\`.\n\n          The \\`render\\` argument is a bound function of the\n          \\`render\\` method you define on your class. To use this\n          renderer, you'd do something like:\n\n          \\`\\`\\`js\n          // ./my-component.js\n\n          import MyRenderer from './my-renderer';\n\n          export default class extends MyRenderer {\n            render() {\n              return 'Hello, World!';\n            }\n          }\n          \\`\\`\\`\n\n          > The \\`render\\` function is bound with the host element as\n          \\`this\\` and the first argument, so you can also destructure in\n          the function arguments, if you want to.\n\n          #### Hooking it up\n\n          The one problem here is that your component doesn't yet know how to hook\n          up \\`render\\` with \\`renderer\\` because you need to\n          mixin \\`withRenderer\\`.\n\n          \\`\\`\\`js\n          // ./my-component.js\n\n          import { withRenderer } from 'skatejs';\n          import MyRenderer from './my-renderer';\n\n          export default class extends withRenderer(MyRenderer) {\n            render() {\n              return 'Hello, World!';\n            }\n          }\n          \\`\\`\\`\n\n          #### Reuse\n\n          If you want to make this renderer a bit more generic, you might want it\n          to be able to accept other types of base classes, as opposed to having\n          it fixed to \\`HTMLElement\\`. To do this, just make it a mixin.\n          This consists of making it into a function that returns a class.\n\n          \\`\\`\\`js\n          // ./my-renderer.js\n\n          export default (Base = HTMLElement) =>\n            class extends Base {\n              renderer(root, render) {\n                root.innerHTML = render();\n              }\n            }\n          \\`\\`\\`\n\n          And there you have your renderer that you can reuse with any component.\n\n          Taking the \\`render\\` example a bit further, it will now look\n          something like:\n\n          \\`\\`\\`js\n          // ./my-component.js\n\n          import { withRenderer } from 'skatejs';\n          import myRenderer from './my-renderer';\n\n          export default class extends withRenderer(myRenderer()) {\n            render() {\n              return 'Hello, World!';\n            }\n          }\n          \\`\\`\\`\n\n          #### Responding to attributes and properties\n\n          This component doesn't yet respond to property sets, or have any dynamic\n          states. If we wanted to, say, accept a name property or attribute, we\n          can mixin the \\`withUpdate\\` and \\`withRenderer\\`\n          mixins with your renderer.\n\n          \\`\\`\\`js\n          // ./my-component.js\n\n          import { props, withRenderer, withUpdate } from 'skatejs';\n          import myRenderer from './my-renderer';\n\n          export default class extends withRenderer(withUpdate(myRenderer())) {\n            static get props() {\n              return {\n                name: props.string\n              };\n            }\n            render({ name }) {\n              return \\`Hello, \\${name}!\\`;\n            }\n          }\n          \\`\\`\\`\n\n          This component would now render when both a \\`name\\` property\n          _and_ a \\`name\\` attribute are set.\n\n          #### Simplifying as a base class\n\n          If you don't want to repeat the mixin calls, simply make it a base\n          class:\n\n          \\`\\`\\`js\n          // ./my-base.js\n\n          import { withRenderer, withUpdate } from 'skatejs';\n          import myRenderer from './my-renderer';\n\n          export default myRenderer(withRenderer(withUpdate()));\n          \\`\\`\\`\n\n          > Your renderer can be composed into any point of your mixin chain, too!\n\n          Your component then can use it:\n\n          \\`\\`\\`js\n          // ./my-component.js\n\n          import { props } from 'skatejs';\n          import MyBase from './my-base';\n\n          class MyComponent extends MyBase {\n            static get props() {\n              return {\n                name: props.string\n              };\n            }\n            render({ name }) {\n              return \\`Hello, \\${name}!\\`;\n            }\n          }\n          \\`\\`\\`\n        `}\"></x-marked>\n      </x-layout>\n    `;\n    }\n  }\n);\n"
      },
      "lineCount": null
    }
  },
  "hash": "8a587c3503d441cb72da4d69d1910d6c",
  "cacheData": { "env": {} }
}
